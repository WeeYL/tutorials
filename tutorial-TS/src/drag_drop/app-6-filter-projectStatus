// project class

enum ProjectStatus {
  finished,
  active,
}

class Project {
  constructor(
    public id: string,
    public title: string,
    public description: string,
    public people: number,
    public status: ProjectStatus
  ) {}
}

type Listener = (items: Project[]) => void; // each listener run a list of projects

// project state

class ProjectState {
  private projects: Project[] = [];
  private listeners: Listener[] = []; // list of functions
  private static instance: ProjectState;

  private constructor() {}

  // func
  addListener(listenerFn: Listener) {
    this.listeners.push(listenerFn); // listen for any changes
  }

  addProject(title: string, description: string, people: number) {
    const newProject = new Project(
      Math.random().toString(),
      title,
      description,
      people,
      ProjectStatus.active // default
    );

    this.projects.push(newProject);

    for (let listenerFn of this.listeners) {
      // console.log("listen", listenerFn); // returns  (projects) => { this.assignedProjects = projects;  this.renderProjects(); }
      listenerFn(this.projects.slice() /* slice makes a copy */);
    }
  }

  static getInstance() {
    if (this.instance) {
      return this.instance;
    }
    this.instance = new ProjectState();
    return this.instance;
  }
}

// create a class function to be accessed anywhere
const projectState = ProjectState.getInstance(); // create new class

// interface

interface Validatable {
  value: string | number;
  required?: boolean;
  minLen?: number;
  maxLen?: number;
  min?: number;
  max?: number;
}

function validate(validatableInput: Validatable) {
  let isValid = true; // truthsy toggler
  if (validatableInput.required) {
    isValid = isValid && validatableInput.value.toString().trim().length !== 0;
  }

  if (
    validatableInput.minLen != null &&
    typeof validatableInput.value === "string"
  ) {
    isValid =
      isValid && validatableInput.value.length >= validatableInput.minLen;
  }
  if (
    validatableInput.maxLen != null &&
    typeof validatableInput.value === "string"
  ) {
    isValid =
      isValid && validatableInput.value.length <= validatableInput.maxLen;
  }

  if (
    validatableInput.min != null &&
    typeof validatableInput.value === "number"
  ) {
    isValid = isValid && validatableInput.value >= validatableInput.min;
  }

  if (
    validatableInput.max != null &&
    typeof validatableInput.value === "number"
  ) {
    isValid = isValid && validatableInput.value <= validatableInput.max;
  }

  return isValid;
}

// decorator

function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {
  const orginalDec = descriptor.value;
  const newDec: PropertyDescriptor = {
    configurable: true,
    get() {
      return orginalDec.bind(this);
    },
  };
  //   console.log('orginalDec: \n',orginalDec);
  //   console.log('new dec:\n',newDec)
  return newDec;
}

// project list

class ProjectList {
  templateEl: HTMLTemplateElement;
  hostEl: HTMLDivElement;
  element: HTMLElement;
  assignedProjects: any[];

  constructor(private type: "active" | "finished") {
    this.assignedProjects = [];
    this.templateEl = <HTMLTemplateElement>(
      document.getElementById("project-list")!
    );
    this.hostEl = <HTMLDivElement>document.getElementById("app")!;

    const importedNode = document.importNode(this.templateEl.content, true);
    this.element = <HTMLElement>importedNode.firstElementChild;
    
    this.element.id = `${this.type}-projects`;

    // always rendering

    projectState.addListener((projects: Project[]) => {
      
      // set project status
      const relevantProjects = projects.filter((prj) => {
        if (this.type === "active") {
          return prj.status === ProjectStatus.active;
        } 
        return prj.status === ProjectStatus.finished
      });
      this.assignedProjects = relevantProjects;
      this.renderProjects();
    });

    //exe
    this.attach();
    this.renderContent();
  }
  // func
  attach() {
    this.hostEl.insertAdjacentElement("beforeend", this.element);
  }

  renderContent() {
    const listId = `${this.type}-projects-list`;
    this.element.querySelector("ul")!.id = listId;
    this.element.querySelector("h2")!.innerHTML =
      this.type.toUpperCase() + "PROJECTS";
  }

  renderProjects() {
    const listEl = <HTMLUListElement>(
      document.getElementById(`${this.type}-projects-list`)!
    );
    listEl.innerHTML = '' // clear content else duplicates
    for (const prjItem of this.assignedProjects) {
      const listItem = document.createElement("li");
      listItem.textContent = prjItem.title;
      listEl.appendChild(listItem);
    }
  }
}

// project input
class ProjectInput {
  templateEl: HTMLTemplateElement;
  hostEl: HTMLDivElement;
  elementForm: HTMLElement;
  inputTitle: HTMLInputElement;
  inputPeople: HTMLInputElement;
  inputDescription: HTMLInputElement;

  constructor() {
    // init host and template, copy template, assign() template to host
    this.hostEl = <HTMLDivElement>document.getElementById("app")!;
    this.templateEl = <HTMLTemplateElement>(
      document.getElementById("project-input")!
    );
    const importedNode = document.importNode(this.templateEl.content, true);
    this.elementForm = <HTMLElement>importedNode.firstElementChild;

    this.elementForm.id = "user-input"; // for styling purpopse only

    //access
    this.inputTitle = <HTMLInputElement>(
      this.elementForm.querySelector("#title") // getElementById not support for form
    );
    this.inputPeople = <HTMLInputElement>(
      this.elementForm.querySelector("#people")
    );
    this.inputDescription = <HTMLInputElement>(
      this.elementForm.querySelector("#description")
    );

    this.attach();
    this.config();
  }

  @autobind
  submitHandler(event: Event) {
    event.preventDefault(); // do not submit yet
    const userInput = this.userInfo();
    if (Array.isArray(userInput)) {
      const [t, d, p] = userInput;
      projectState.addProject(t, d, p);
    }
  }

  // for submission
  config() {
    this.elementForm.addEventListener("submit", this.submitHandler); // this.submitHandler.bind(this)
  }

  // attach template to div#app
  attach() {
    this.hostEl.insertAdjacentElement("afterbegin", this.elementForm);
  }

  userInfo(): [string, string, number] | void {
    const t = this.inputTitle.value;
    const d = this.inputDescription.value;
    const p = this.inputPeople.value;

    // set title with interface for validation
    const titleValidatable: Validatable = {
      value: t,
      required: true,
      minLen: 3,
      maxLen: 100,
    };
    const descValidatable: Validatable = {
      value: d,
      required: false,
    };
    const peopleValidatable: Validatable = {
      value: +p, // change to number
      required: true,
      min: 2,
      max: 12,
    };

    if (
      !validate(titleValidatable) ||
      !validate(descValidatable) ||
      !validate(peopleValidatable)
    ) {
      alert("can not leave empty");
    }
    return [t, d, +p];
  }
}

// instantiate
let prjInput = new ProjectInput();
let activePrjList = new ProjectList("active");
let finishedPrjList = new ProjectList("finished");
