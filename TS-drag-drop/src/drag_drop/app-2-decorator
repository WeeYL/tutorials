// decorator

function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {
  const orginalDec = descriptor.value;
  const newDec: PropertyDescriptor = {
    configurable: true,
    get() {
      console.log(orginalDec.bind(this));

      return orginalDec.bind(this);
    },
  };
  //   console.log('orginalDec: \n',orginalDec);
  //   console.log('new dec:\n',newDec)
  return newDec;
}

//
class ProjectInput {
  templateEl: HTMLTemplateElement;
  hostEl: HTMLDivElement;
  elementForm: HTMLElement;
  inputTitle: HTMLInputElement;
  inputPeople: HTMLInputElement;
  inputDescription: HTMLInputElement;

  constructor() {
    this.templateEl = <HTMLTemplateElement>(
      document.getElementById("project-input")
    );
    const importedNode = document.importNode(this.templateEl.content, true);
    this.elementForm = <HTMLElement>importedNode.firstElementChild;

    this.elementForm.id = "user-input";
    this.hostEl = <HTMLDivElement>document.getElementById("app");

    //access
    this.inputTitle = <HTMLInputElement>(
      this.elementForm.querySelector("#title") // getElementById not support for form
    );
    this.inputPeople = <HTMLInputElement>(
      this.elementForm.querySelector("#people")
    );
    this.inputDescription = <HTMLInputElement>(
      this.elementForm.querySelector("#description")
    );

    this.attach();
    this.config();
    
  }

  @autobind
  submitHandler(event: Event) {
    event.preventDefault(); // do not submit yet
    const userInput = this.userInfo();
    if (Array.isArray(userInput)){
        const [t,d,p] = userInput
        console.log(t,d,p);
        
    }
    
  }

  config() {
    this.elementForm.addEventListener("submit", this.submitHandler); // this.submitHandler.bind(this)
  }

  attach() {
    this.hostEl.insertAdjacentElement("afterbegin", this.elementForm);
  }

  userInfo(): [string,string,number] | void {
    const t = this.inputTitle.value;
    const d = this.inputDescription.value;
    const p = this.inputPeople.value;
    if (t.trim().length === 0 || d.trim().length === 0 || p.trim().length === 0) {
      alert("empty");
    } else {
      return [t,d,+p];
    }
  }
}

let x = document.querySelectorAll("template ~ div");
x.forEach((n) => console.log(n));

let prj = new ProjectInput();
