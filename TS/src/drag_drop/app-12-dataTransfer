// interface dragdrop

interface Draggable {
  // html to add draggable to li tag
  // implement on project item
  dragStartHandler(event: DragEvent): void;
  dragEndHandler(event: DragEvent): void;
}

interface DragTarget {
  // implement on project list
  dragOverHandler(event: DragEvent): void;
  dropHandler(event: DragEvent): void;
  dragLeaveHandler(event: DragEvent): void;
}

// project class

enum ProjectStatus {
  finished,
  active,
}

type Listener<T> = (items: T[]) => void; // each listener run a list of projects

class Project {
  constructor(
    public id: string,
    public title: string,
    public description: string,
    public people: number,
    public status: ProjectStatus
  ) {}
}

class State<T> {
  protected listeners: Listener<T>[] = [];
  addListener(listenerFn: Listener<T>) {
    this.listeners.push(listenerFn); // listen for any changes
  }
}

// component

abstract class Component<T extends HTMLElement, U extends HTMLElement> {
  templateEl: HTMLTemplateElement;
  hostEl: T;
  element: U;

  constructor(
    templateId: string,
    hostElId: string,
    insertAtStart: boolean,
    newElId: string
  ) {
    this.templateEl = <HTMLTemplateElement>document.getElementById(templateId)!;
    this.hostEl = <T>document.getElementById(hostElId)!;

    const importedNode = document.importNode(this.templateEl.content, true);
    this.element = <U>importedNode.firstElementChild;

    this.element.id = newElId;
    if (newElId) {
      this.element.id = newElId;
    }
    this.attach(insertAtStart);
  }

  // func
  abstract configure(): void;
  abstract renderContent(): void;

  // exe func
  private attach(insertAtStart: boolean) {
    this.hostEl.insertAdjacentElement(
      insertAtStart ? "afterbegin" : "beforeend",
      this.element
    );
  }
}

class ProjectItem
  extends Component<HTMLUListElement, HTMLLIElement>
  implements Draggable
{
  constructor(private project: Project, hostElId: string) {
    super("single-project", hostElId, false, project.id);

    this.renderContent();
    this.configure();
  }
  get persons() {
    if (this.project.people === 1) {
      return "1 person";
    }
    return `${this.project.people} persons`;
  }

  configure() {
    this.element.addEventListener("dragstart", this.dragStartHandler);
    this.element.addEventListener("dragend", this.dragEndHandler);
  }
  renderContent() {
    this.element.querySelector("h2")!.textContent = this.project.title;
    this.element.querySelector("h3")!.textContent = this.persons;
    this.element.querySelector("p")!.textContent = this.project.description;
  }

  @autobind
  dragStartHandler(event: DragEvent) {
    // data transfer, ID only
    event.dataTransfer!.setData("text/plain", this.project.id);
    event.dataTransfer!.effectAllowed = "move";
  }

  dragEndHandler(_: DragEvent) {
    console.log("DragEnd");
  }
}

// project state

class ProjectState extends State<Project> {
  private projects: Project[] = [];
  private static instance: ProjectState;

  private constructor() {
    super();
  }

  // func
  addProject(title: string, description: string, people: number) {
    const newProject = new Project(
      Math.random().toString(),
      title,
      description,
      people,
      ProjectStatus.active // default
    );

    this.projects.push(newProject);

    for (let listenerFn of this.listeners) {
      // console.log("listen", listenerFn); // returns  (projects) => { this.assignedProjects = projects;  this.renderProjects(); }
      listenerFn(this.projects.slice() /* slice makes a copy */);
    }
  }

  static getInstance() {
    if (this.instance) {
      return this.instance;
    }
    this.instance = new ProjectState();
    return this.instance;
  }
}

// create a class function to be accessed anywhere
const projectState = ProjectState.getInstance(); // create new class

// project list

class ProjectList
  extends Component<HTMLDivElement, HTMLElement>
  implements DragTarget
{
  assignedProjects: any[];

  constructor(private type: "active" | "finished") {
    super("project-list", "app", false, `${type}-projects`);

    this.assignedProjects = [];
    this.configure();
    this.renderContent();
  }

  @autobind
  dragOverHandler(event: DragEvent) {
    // drag data over
    if (event.dataTransfer && event.dataTransfer.types[0] === "text/plain") {
      event.preventDefault() // default dragover do not allow drop event. Prevent default remove this behavior
      this.element.querySelector("ul")!.classList.add("droppable"); // add a CSS class
    }
  }

  dropHandler(event: DragEvent) {
    const id = event.dataTransfer!.getData("text/plain")
    console.log(this.assignedProjects)

  }

  @autobind
  dragLeaveHandler(event: DragEvent) {
    this.element.querySelector("ul")!.classList.remove("droppable"); // removes a CSS class
  }
  configure() {
    this.element.addEventListener("dragover", this.dragOverHandler);
    this.element.addEventListener("drop", this.dropHandler);
    this.element.addEventListener("dragleave", this.dragLeaveHandler);

    projectState.addListener((projects: Project[]) => {
      // set project status
      const relevantProjects = projects.filter((prj) => {
        if (this.type === "active") {
          return prj.status === ProjectStatus.active;
        }
        return prj.status === ProjectStatus.finished;
      });
      this.assignedProjects = relevantProjects;
      this.renderProjects();
    });
  }
  listId = `${this.type}-projects-list`;

  renderContent() {
    const listId = `${this.type}-projects-list`;
    this.element.querySelector("ul")!.id = listId;
    this.element.querySelector("h2")!.innerHTML =
      this.type.toUpperCase() + "PROJECTS";
  }

  renderProjects() {
    const listEl = <HTMLUListElement>(
      document.getElementById(`${this.type}-projects-list`)!
    );
    listEl.innerHTML = ""; // clear content else duplicates
    for (const prjItem of this.assignedProjects) {
      new ProjectItem(prjItem, this.listId);
    }
  }
}

// project input
class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {
  inputTitle: HTMLInputElement;
  inputPeople: HTMLInputElement;
  inputDescription: HTMLInputElement;

  constructor() {
    super("project-input", "app", true, "user-input");
    this.hostEl = <HTMLDivElement>document.getElementById("app")!;
    this.templateEl = <HTMLTemplateElement>(
      document.getElementById("project-input")!
    );

    //access
    this.inputTitle = <HTMLInputElement>this.element.querySelector("#title"); // getElementById not support for form
    this.inputPeople = <HTMLInputElement>this.element.querySelector("#people");
    this.inputDescription = <HTMLInputElement>(
      this.element.querySelector("#description")
    );

    this.configure();
    this.renderContent();
  }

  // for submission
  configure() {
    this.element.addEventListener("submit", this.submitHandler); // this.submitHandler.bind(this)
  }

  renderContent() {} // dummy

  @autobind
  submitHandler(event: Event) {
    event.preventDefault(); // do not submit yet
    const userInput = this.userInfo();
    if (Array.isArray(userInput)) {
      const [t, d, p] = userInput;
      projectState.addProject(t, d, p);
    }
  }

  userInfo(): [string, string, number] | void {
    const t = this.inputTitle.value;
    const d = this.inputDescription.value;
    const p = this.inputPeople.value;

    // set title with interface for validation
    const titleValidatable: Validatable = {
      value: t,
      required: true,
      minLen: 3,
      maxLen: 100,
    };
    const descValidatable: Validatable = {
      value: d,
      required: false,
    };
    const peopleValidatable: Validatable = {
      value: +p, // change to number
      required: true,
      min: 1,
      max: 12,
    };

    if (
      !validate(titleValidatable) ||
      !validate(descValidatable) ||
      !validate(peopleValidatable)
    ) {
      alert("can not leave empty");
    }
    return [t, d, +p];
  }
}

// interface

interface Validatable {
  value: string | number;
  required?: boolean;
  minLen?: number;
  maxLen?: number;
  min?: number;
  max?: number;
}

function validate(validatableInput: Validatable) {
  let isValid = true; // truthsy toggler
  if (validatableInput.required) {
    isValid = isValid && validatableInput.value.toString().trim().length !== 0;
  }

  if (
    validatableInput.minLen != null &&
    typeof validatableInput.value === "string"
  ) {
    isValid =
      isValid && validatableInput.value.length >= validatableInput.minLen;
  }
  if (
    validatableInput.maxLen != null &&
    typeof validatableInput.value === "string"
  ) {
    isValid =
      isValid && validatableInput.value.length <= validatableInput.maxLen;
  }

  if (
    validatableInput.min != null &&
    typeof validatableInput.value === "number"
  ) {
    isValid = isValid && validatableInput.value >= validatableInput.min;
  }

  if (
    validatableInput.max != null &&
    typeof validatableInput.value === "number"
  ) {
    isValid = isValid && validatableInput.value <= validatableInput.max;
  }

  return isValid;
}

// decorator

function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {
  const orginalDec = descriptor.value;
  const newDec: PropertyDescriptor = {
    configurable: true,
    get() {
      return orginalDec.bind(this);
    },
  };
  //   console.log('orginalDec: \n',orginalDec);
  //   console.log('new dec:\n',newDec)
  return newDec;
}

// instantiate
let prjInput = new ProjectInput();
let activePrjList = new ProjectList("active");
let finishedPrjList = new ProjectList("finished");
