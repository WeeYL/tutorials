const request = require("supertest");
const { MyModel: genreModel } = require("./model-genre");
const { MyModel: userModel } = require("./model-user");

let server;

// run server once and close it, else it'll run twice
beforeEach(() => {
  server = require("./app-vidly");
});
afterEach(async () => {
  await genreModel.remove({});
  await server.close();
});

describe("GET", () => {
  // go to end point and get status
  it("should return all genre", async () => {
    await genreModel.collection.insertMany([
      { name: "genre1" },
      { name: "genre2" },
    ]);

    const res = await request(server).get("/genre");

    expect(res.status).toBe(200);
    expect(res.body.length).toBe(2);
    expect(res.body.some((n) => n.name === "genre1")).toBeTruthy();

    // await genreModel.remove({})
  });
});

describe("GET /:id", () => {
  it("should return a genre if valid id is passed", async () => {
    const genre = new genreModel({ name: "genre1" });
    await genre.save();
    const res = await request(server).get("/genre/", genre._id);

    //test
    expect(res.status).toBe(200);
    expect(res.body[0]).toHaveProperty("name", genre.name);

    await genreModel.remove({});
  });

  it("should return 404 if invalid id is passed", async () => {
    const res = await request(server).get("/genre/1");

    //test
    expect(res.status).toBe(404);
  });
});

// setup

let token;
let name;

beforeEach(() => {
  token = new userModel().generateAuthToken();
  name = "genre1";
});
async function exec() {
  return await request(server)
    .post("/genre")
    .set("x-auth-token", token)
    .send({ name });
}
describe("POST", () => {
  // test


  it("should return 401 for unauthorized. User not logged in", async () => {
    token = "";
    const res = await exec();
    expect(res.status).toBe(401);
  });

  it("should return return 404 if character is less than 3 char", async () => {
    name = "12";

    const res = await exec();

    expect(res.status).toBe(404);
  });

  it("should return return 404 if character no more than 30 char", async () => {
    name = new Array(32).join("a");

    const res = await exec();

    expect(res.status).toBe(404);
  });

  it("should save genre for valid input", async () => {
    const res = await exec();

    const getGenre = await genreModel.find({ name: "genre1" }); // query

    expect(getGenre).not.toBeNull();
    expect(res.body).toHaveProperty("_id");
    expect(res.body).toHaveProperty("name", "genre1");
  });


});
